// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace jschweda.luisDemo.client.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class AppResponseV2
    {
        /// <summary>
        /// Initializes a new instance of the AppResponseV2 class.
        /// </summary>
        public AppResponseV2()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AppResponseV2 class.
        /// </summary>
        public AppResponseV2(string query = default(string), string alteredQuery = default(string), AppIntent topScoringIntent = default(AppIntent), IList<AppIntent> intents = default(IList<AppIntent>), IList<Entity> entities = default(IList<Entity>), IList<CompositeEntity> compositeEntities = default(IList<CompositeEntity>), SentimentResult sentimentAnalysis = default(SentimentResult), AppResponseV2 connectedServiceResult = default(AppResponseV2), IList<AppResponseV2> multiIntents = default(IList<AppResponseV2>))
        {
            Query = query;
            AlteredQuery = alteredQuery;
            TopScoringIntent = topScoringIntent;
            Intents = intents;
            Entities = entities;
            CompositeEntities = compositeEntities;
            SentimentAnalysis = sentimentAnalysis;
            ConnectedServiceResult = connectedServiceResult;
            MultiIntents = multiIntents;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "query")]
        public string Query { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "alteredQuery")]
        public string AlteredQuery { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "topScoringIntent")]
        public AppIntent TopScoringIntent { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "intents")]
        public IList<AppIntent> Intents { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "entities")]
        public IList<Entity> Entities { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "compositeEntities")]
        public IList<CompositeEntity> CompositeEntities { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "sentimentAnalysis")]
        public SentimentResult SentimentAnalysis { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "connectedServiceResult")]
        public AppResponseV2 ConnectedServiceResult { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "multiIntents")]
        public IList<AppResponseV2> MultiIntents { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Entities != null)
            {
                if (Entities.Count != System.Linq.Enumerable.Count(System.Linq.Enumerable.Distinct(Entities)))
                {
                    throw new ValidationException(ValidationRules.UniqueItems, "Entities");
                }
            }
            if (ConnectedServiceResult != null)
            {
                ConnectedServiceResult.Validate();
            }
            if (MultiIntents != null)
            {
                foreach (var element in MultiIntents)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
