// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace jschweda.luisDemo.client
{
    using Microsoft.Rest;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Language Understanding service (LUIS) allows your application to
    /// understand what a person wants in their own words. LUIS uses machine
    /// learning to allow developers to build applications that can receive
    /// user input in natural language and extract meaning from it.
    /// </summary>
    public partial interface ILuisCognitiveServiceAPI : System.IDisposable
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        JsonSerializerSettings SerializationSettings { get; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        JsonSerializerSettings DeserializationSettings { get; }


        /// <summary>
        /// Gets the published endpoint predictions for the given query. The
        /// current maximum query size is 500 characters.
        /// </summary>
        /// <param name='appId'>
        /// The identifier of the LUIS app used to extract the intents and
        /// entities. A LUIS app is identified by a GUID and is obtained from
        /// the LUIS portal.
        /// </param>
        /// <param name='q'>
        /// The query to extract intents and entities from.
        /// </param>
        /// <param name='staging'>
        /// A boolean value indicating whether to use the staging endpoint
        /// instead of the default production endpoint.
        /// </param>
        /// <param name='timezoneOffset'>
        /// The timezone offset for the location of the request in minutes.
        /// </param>
        /// <param name='verbose'>
        /// A boolean value indicating whether to return all intents instead of
        /// just the top-scoring intent.
        /// </param>
        /// <param name='log'>
        /// A boolean value indicating whether to log the query.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<AppResponseV2>> LuisV20AppsByAppIdGetWithHttpMessagesAsync(System.Guid appId, string q, bool? staging = false, double? timezoneOffset = 0, bool? verbose = false, bool? log = true, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the published endpoint predictions for the given query. The
        /// current maximum query size is 500 characters.
        /// </summary>
        /// <param name='appId'>
        /// The identifier of the LUIS app used to extract the intents and
        /// entities. A LUIS app is identified by a GUID and is obtained from
        /// the LUIS portal.
        /// </param>
        /// <param name='q'>
        /// The query to extract intents and entities from.
        /// </param>
        /// <param name='staging'>
        /// A boolean value indicating whether to use the staging endpoint
        /// instead of the default production endpoint.
        /// </param>
        /// <param name='timezoneOffset'>
        /// The timezone offset for the location of the request in minutes.
        /// </param>
        /// <param name='verbose'>
        /// A boolean value indicating whether to return all intents instead of
        /// just the top-scoring intent.
        /// </param>
        /// <param name='log'>
        /// A boolean value indicating whether to log the query.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<AppResponseV2>> LuisV20AppsByAppIdPostWithHttpMessagesAsync(System.Guid appId, string q, bool? staging = false, double? timezoneOffset = 0, bool? verbose = false, bool? log = true, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the trained application predictions for the given query. The
        /// current maximum query size is 500 characters.
        /// </summary>
        /// <param name='appId'>
        /// The identifier of the LUIS app used to extract the intents and
        /// entities. A LUIS app is identified by a GUID and is obtained from
        /// the LUIS portal.
        /// </param>
        /// <param name='q'>
        /// The query to extract intents and entities from.
        /// </param>
        /// <param name='versionId'>
        /// The version id of the trained LUIS app.
        /// </param>
        /// <param name='timezoneOffset'>
        /// The timezone offset for the location of the request in minutes.
        /// </param>
        /// <param name='verbose'>
        /// A boolean value indicating whether to return all intents instead of
        /// just the top-scoring intent.
        /// </param>
        /// <param name='log'>
        /// A boolean value indicating whether to log the query.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<AppResponseV2>> LuisV20AppsByAppIdVersionsByVersionIdGetWithHttpMessagesAsync(System.Guid appId, string q, string versionId, double? timezoneOffset = 0, bool? verbose = false, bool? log = true, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the trained application predictions for the given query. The
        /// current maximum query size is 500 characters.
        /// </summary>
        /// <param name='appId'>
        /// The identifier of the LUIS app used to extract the intents and
        /// entities. A LUIS app is identified by a GUID and is obtained from
        /// the LUIS portal.
        /// </param>
        /// <param name='q'>
        /// The query to extract intents and entities from.
        /// </param>
        /// <param name='versionId'>
        /// The version id of the trained LUIS app.
        /// </param>
        /// <param name='timezoneOffset'>
        /// The timezone offset for the location of the request in minutes.
        /// </param>
        /// <param name='verbose'>
        /// A boolean value indicating whether to return all intents instead of
        /// just the top-scoring intent.
        /// </param>
        /// <param name='log'>
        /// A boolean value indicating whether to log the query.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<AppResponseV2>> LuisV20AppsByAppIdVersionsByVersionIdPostWithHttpMessagesAsync(System.Guid appId, string q, string versionId, double? timezoneOffset = 0, bool? verbose = false, bool? log = true, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ContainerStatus>> StatusGetWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

    }
}
